//~~tv:15032.20180409
//~~tc: Adding tag Outbrain Pixel version 1.1

window.obApi = window.obApi || function() {
  obApi.dispatch ? obApi.dispatch.apply(obApi, arguments) : obApi.queue.push(arguments);
};

//tealium universal tag - utag.sender.15032 ut4.0.202103251106, Copyright 2021 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = {"id" : id};
    utag.o[loader].sender[id] = u;
    // Please do not modify
    if (utag.ut === undefined) { utag.ut = {}; }
    // Start Tealium loader 4.41
    /* utag.js version 4.26 or above is required to avoid errors with this loader function */
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) { u.loader = function(o, a, b, c, l, m) { utag.DB(o); a = document; if (o.type == "iframe") { m = a.getElementById(o.id); if (m && m.tagName == "IFRAME") { b = m; } else { b = a.createElement("iframe"); } o.attrs = o.attrs || {}; utag.ut.merge(o.attrs, { "height": "1", "width": "1", "style": "display:none" }, 0); } else if (o.type == "img") { utag.DB("Attach img: " + o.src); b = new Image(); } else { b = a.createElement("script"); b.language = "javascript"; b.type = "text/javascript"; b.async = 1; b.charset = "utf-8"; } if (o.id) { b.id = o.id; } for (l in utag.loader.GV(o.attrs)) { b.setAttribute(l, o.attrs[l]); } b.setAttribute("src", o.src); if (typeof o.cb == "function") { if (b.addEventListener) { b.addEventListener("load", function() { o.cb(); }, false); } else { b.onreadystatechange = function() { if (this.readyState == "complete" || this.readyState == "loaded") { this.onreadystatechange = null; o.cb(); } }; } } if (o.type != "img" && !m) { l = o.loc || "head"; c = a.getElementsByTagName(l)[0]; if (c) { utag.DB("Attach to " + l + ": " + o.src); if (l == "script") { c.parentNode.insertBefore(b, c); } else { c.appendChild(b); } } } }; } else { u.loader = utag.ut.loader; }
    // End Tealium loader
    // Start Tealium typeOf 4.35
    if (utag.ut.typeOf === undefined) { u.typeOf = function(e) {return ({}).toString.call(e).match(/\s([a-zA-Z]+)/)[1].toLowerCase();};} else { u.typeOf = utag.ut.typeOf; }
    // End Tealium typeOf

    u.ev = {"view" : 1, "link" : 1};
    u.scriptrequested = false;

    u.map_func = function (arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        u.map_func(arr,obj[i], item);
      } else {
        obj[i] = item;
      }
    };

    u.clearEmptyKeys = function (object) {
      for (var key in object) {
        if (object[key] === "" || object[key] === undefined) {
          delete object[key];
        }
      }
      return object;
    };

      u.map={};
  u.extend=[];


    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:151");
        utag.DB(b);

        var c, d, e, f, h, i, j, event_data, tracked_purchase;

        u.data = {
          "base_url" : "//amplify.outbrain.com/cp/obtp.js",
          "marketer_id" : "002bf5a0df0fb33177109ff3938f1fc444",
          "event" : []
        };

        // Start tag-scoped extensions
        
        utag.DB("send:151:EXTENSIONS");
        utag.DB(b);
        // End tag-scoped extensions

        // Start Mapping
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.map_func(e[f].split("."), u.data, b[d]);
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.event = u.data.event.concat(u.map[d].split(","));
              }
            }
          }
        }
        utag.DB("send:151:MAPPINGS");
        utag.DB(u.data);
        // End Mapping  

        // Pull E-Commerce extension values
        // Mappings override E-Commerce extension values
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_subtotal = u.data.order_subtotal || b._csubtotal || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "USD";
        
        if (u.data.event.length === 0 && b._cevent !== undefined) { u.data.event = (u.typeOf(b._cevent) === "array") ? b._cevent.slice(0) : [b._cevent] ; }

        // Report required config is missing, and stop tag from firing.
        if (!u.data.marketer_id) {
          utag.DB(u.id + ": Tag not fired: Required attribute marketer_id not populated");
          return;
        }
        // converts marketer_id CSV into an array
        u.data.marketer_id = u.data.marketer_id.split(",");
        for (i = 0; i < u.data.marketer_id.length; i++) {
          // removes any leading or trailing whitespaces from each of the IDs
          u.data.marketer_id[i] = u.data.marketer_id[i].trim();
        }

        // Setting vendor API parameters
        obApi.version = "1.0";
        obApi.loaded = true;
        obApi.marketerId = u.data.marketer_id;
        obApi.queue = [];

        // triggers page view tracking only for page load/utag.view calls
        if (a === "view") {
          obApi("track", "PAGE_VIEW");
        }  
        
        event_data = {};
        tracked_purchase = false;

        // automatically fires Purchase tracking if an order ID is present
        if (u.data.order_id) {
          tracked_purchase = true;
          event_data.orderId = u.data.order_id;
          event_data.orderValue = u.data.order_subtotal;
          event_data.currency = u.data.order_currency;
          event_data = u.clearEmptyKeys(event_data);
          obApi("track","Purchase",event_data);
        }

        for (j = 0; j < u.data.event.length; j++) {
          // prevents duplicate purchase tracking, but allows explicitly set Purchase tracking in situations where an order ID may not be present
          if (u.data.event[j] === "Purchase" && !tracked_purchase) {
            tracked_purchase = true;
            event_data.orderId = u.data[u.data.event[j]].order_id || u.data.order_id;
            event_data.orderValue = u.data[u.data.event[j]].order_subtotal || u.data.order_subtotal;
            event_data.currency = u.data[u.data.event[j]].order_currency || u.data.order_currency || "USD";
          }
          event_data = u.clearEmptyKeys(u.data[u.data.event[j]]);
          if (utag.ut.isEmptyObject(u.data[u.data.event[j]])) {
            obApi("track",u.data.event[j]);
          } else {
            obApi("track",u.data.event[j],u.data[u.data.event[j]]);
          }
        }

        if (!u.scriptrequested) {
          u.scriptrequested = true;
          u.loader({
            "type" : "script",
            "src" : u.data.base_url,
            "cb" : null,
            "loc" : "script",
            "id" : "utag_151",
            "attrs" : {}
          });
        }

        utag.DB("send:151:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  }("151", "leroymerlinit.main"));
} catch (error) {
  utag.DB(error);
}
//end tealium universal tag

